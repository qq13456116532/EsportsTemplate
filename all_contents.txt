miniprogram/components\navigation-bar\navigation-bar.json：
【{
  "component": true,
  "styleIsolation": "apply-shared",
  "usingComponents": {}
}】

miniprogram/components\navigation-bar\navigation-bar.ts：
【Component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false,
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    },
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = wx.getMenuButtonBoundingClientRect()
      wx.getSystemInfo({
        success: (res) => {
          const isAndroid = res.platform === 'android'
          const isDevtools = res.platform === 'devtools'
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left }px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          })
        }
      })
    },
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show: boolean) {
      const animated = this.data.animated
      let displayStyle = ''
      if (animated) {
        displayStyle = `opacity: ${
          show ? '1' : '0'
        };transition:opacity 0.5s;`
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`
      }
      this.setData({
        displayStyle
      })
    },
    back() {
      const data = this.data
      if (data.delta) {
        wx.navigateBack({
          delta: data.delta
        })
      }
      this.triggerEvent('back', { delta: data.delta }, {})
    }
  },
})
】

miniprogram/components\navigation-bar\navigation-bar.wxml：
【<view class="weui-navigation-bar {{extClass}}">
  <view class="weui-navigation-bar__inner {{ios ? 'ios' : 'android'}}" style="color: {{color}}; background: {{background}}; {{displayStyle}}; {{innerPaddingRight}}; {{safeAreaTop}};">

    <!-- 左侧按钮 -->
    <view class='weui-navigation-bar__left' style="{{leftWidth}};">
      <block wx:if="{{back || homeButton}}">
        <!-- 返回上一页 -->
        <block wx:if="{{back}}">
          <view class="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback">
            <view
              bindtap="back"
              class="weui-navigation-bar__btn_goback_wrapper"
              hover-class="weui-active"
              hover-stay-time="100"
              aria-role="button"
              aria-label="返回"
            >
              <view class="weui-navigation-bar__button weui-navigation-bar__btn_goback"></view>
            </view>
          </view>
        </block>
        <!-- 返回首页 -->
        <block wx:if="{{homeButton}}">
          <view class="weui-navigation-bar__buttons weui-navigation-bar__buttons_home">
            <view
              bindtap="home"
              class="weui-navigation-bar__btn_home_wrapper"
              hover-class="weui-active"
              aria-role="button"
              aria-label="首页"
            >
              <view class="weui-navigation-bar__button weui-navigation-bar__btn_home"></view>
            </view>
          </view>
        </block>
      </block>
      <block wx:else>
        <slot name="left"></slot>
      </block>
    </view>

    <!-- 标题 -->
    <view class='weui-navigation-bar__center'>
      <view wx:if="{{loading}}" class="weui-navigation-bar__loading" aria-role="alert">
        <view
          class="weui-loading"
          aria-role="img"
          aria-label="加载中"
        ></view>
      </view>
      <block wx:if="{{title}}">
        <text>{{title}}</text>
      </block>
      <block wx:else>
        <slot name="center"></slot>
      </block>
    </view>
    
    <!-- 右侧留空 -->
    <view class='weui-navigation-bar__right'>
      <slot name="right"></slot>
    </view>
  </view>
</view>
】

miniprogram/pages\about\about.json：
【{ "usingComponents": { "navigation-bar": "/components/navigation-bar/navigation-bar" } }】

miniprogram/pages\about\about.ts：
【// pages/about/about.ts
Page({

  /**
   * 页面的初始数据
   */
  data: {

  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad() {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})】

miniprogram/pages\about\about.wxml：
【<navigation-bar title="关于我们" back="{{true}}" color="black" background="#FFF"></navigation-bar>
<view style="padding: 20px;">
  <text>我们是领先的电竞服务平台，致力于为广大玩家提供最优质的陪练和教学服务。</text>
</view>】

miniprogram/pages\index\index.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\index\index.ts：
【】

miniprogram/pages\index\index.wxml：
【<!--index.wxml-->
<navigation-bar title="Weixin" back="{{false}}" color="black" background="#FFF"></navigation-bar>
<scroll-view class="scrollarea" scroll-y type="list">
  <view class="container">
    <view class="userinfo">
      <block wx:if="{{canIUseNicknameComp && !hasUserInfo}}">
        <button class="avatar-wrapper" open-type="chooseAvatar" bind:chooseavatar="onChooseAvatar">
          <image class="avatar" src="{{userInfo.avatarUrl}}"></image>
        </button>
        <view class="nickname-wrapper">
          <text class="nickname-label">昵称</text>
          <input type="nickname" class="nickname-input" placeholder="请输入昵称" bind:change="onInputChange" />
        </view>
      </block>
      <block wx:elif="{{!hasUserInfo}}">
        <button wx:if="{{canIUseGetUserProfile}}" bindtap="getUserProfile"> 获取头像昵称 </button>
        <view wx:else> 请使用2.10.4及以上版本基础库 </view>
      </block>
      <block wx:else>
        <image bindtap="bindViewTap" class="userinfo-avatar" src="{{userInfo.avatarUrl}}" mode="cover"></image>
        <text class="userinfo-nickname">{{userInfo.nickName}}</text>
      </block>
    </view>
    <view class="usermotto">
      <text class="user-motto">{{motto}}</text>
    </view>
  </view>
</scroll-view>
】

miniprogram/pages\login\login.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\login\login.ts：
【// pages/login/login.ts
import { request } from '../../utils/request';
Page({
  data: {
    phone: '',
    code: '',
    agree: true,
    codeBtnDisabled: false,
    codeBtnText: '获取验证码',
    countdown: 0,       // 秒
    canSubmit: true,
  },

  /* ========= 输入处理 ========= */
  onPhoneInput(e: WechatMiniprogram.CustomEvent) {
    this.setData({ phone: e.detail.value.replace(/\D/g, '') });
  },
  onCodeInput(e: WechatMiniprogram.CustomEvent) {
    this.setData({ code: e.detail.value.replace(/\D/g, '') });
  },
  toggleAgree() {
    this.setData({ agree: !this.data.agree });
  },

  /* ========= 验证码 ========= */
  getCode() {
    if (this.data.codeBtnDisabled) return;
    if (!/^1\d{10}$/.test(this.data.phone)) {
      wx.showToast({ title: '请输入正确的手机号', icon: 'none' });
      return;
    }

    // TODO: 请求后端发送验证码
    wx.showLoading({ title: '发送中...' });
    setTimeout(() => {
      wx.hideLoading();
      wx.showToast({ title: '已发送', icon: 'success' });
      this.startCountdown(60);   // 60 秒倒计时
    }, 500);
  },

  startCountdown(sec: number) {
    this.setData({ codeBtnDisabled: true, countdown: sec });
    this.tick();
  },
  tick() {
    if (this.data.countdown <= 0) {
      this.setData({ codeBtnDisabled: false, codeBtnText: '获取验证码' });
      return;
    }
    this.setData({
      codeBtnText: `${this.data.countdown}s`,
      countdown: this.data.countdown - 1
    });
    setTimeout(() => this.tick(), 1000);
  },

  /* ========= 表单提交 ========= */
  login() {
    if (!this.data.canSubmit) return;
    wx.showLoading({ title: '登录中...' });
    // TODO: 调用后端登录接口
    setTimeout(() => {
      wx.hideLoading();
      wx.showToast({ title: '登录成功', icon: 'success' });
      wx.switchTab({ url: '/pages/index/index' });
    }, 800);
  },

  /* ========= 微信登录方式 ========= */
  loginByWechat() {
    if (!this.data.canSubmit) return;
    this.setData({ canSubmit: false });
    wx.showLoading({ title: '登录中...' });

    // ① 静默换取 code
    wx.login({
      success: ({ code }) => {
        // ② 发送 code 到后端，不再需要 userInfo
        request({
          url: '/wxlogin',          // ← 后端对应接口
          method: 'POST',
          data: { code },           // ← 只发送 code
        })
          .then(({ token, user }) => {    // user = 后端最终保存后的对象
            console.log(token)
            console.log(user)
            wx.setStorageSync('token', token);
            wx.setStorageSync('userInfo', user);
            wx.showToast({ title: '登录成功', icon: 'success' });
            this.leaveAfterLogin();       // 返回原页面 / 首页
          })
          .catch(() => wx.showToast({ title: '登录失败', icon: 'none' }))
          .finally(() => {
            wx.hideLoading();
            this.setData({ canSubmit: true });
          });
      },
      fail: () => {
        wx.hideLoading();
        wx.showToast({ title: '微信登录失败', icon: 'none' });
        this.setData({ canSubmit: true });
      },
    });
  },


  /** 登录完成后返回上一页；若没有历史就去首页 */
  leaveAfterLogin() {
    const pages = getCurrentPages();
    if (pages.length > 1) {
      wx.navigateBack(); // 来源页在栈里，直接返回
    } else {
      wx.switchTab({ url: '/pages/index/index' }); // 栈被覆盖，回首页
    }
  },

  loginByPwd() {
    wx.navigateTo({ url: '/pages/login-pwd/login-pwd' });
  }
});】

miniprogram/pages\login\login.wxml：
【<!-- pages/login/login.wxml -->
<navigation-bar title="登录" back="{{true}}" color="black" background="#FFF"></navigation-bar>

<view class="login-container">
  <view class="login-panel">
    <view class="title">欢迎登录</view>
    <!-- 手机号 -->
    <view class="form-item">
      <text class="label">手机号:</text>
      <input class="input" placeholder="请输入手机号码"
             type="number" maxlength="11"
             value="{{phone}}" bindinput="onPhoneInput"/>
    </view>

    <!-- 验证码 + 按钮 -->
    <view class="form-item">
      <text class="label">验证码:</text>
      <input class="input code-input" placeholder="请输入验证码"
             maxlength="6"
             value="{{code}}" bindinput="onCodeInput"/>
      <button class="code-btn" size="mini"
              disabled="{{codeBtnDisabled}}"
              bindtap="getCode">
        {{ codeBtnText }}
      </button>
    </view>

    <!-- 协议勾选 -->
    <view class="agreement">
      <checkbox checked="{{agree}}" bindtap="toggleAgree"
                color="#ff4d4f"/>
      <text> 我已阅读并同意 </text>
      <navigator url="/pages/agreement/agreement">《用户协议》</navigator>
      <text>和</text>
      <navigator url="/pages/privacy/privacy">《隐私政策》</navigator>
    </view>

    <!-- 登录按钮 -->
    <button class="btn btn-primary"
            disabled="{{!canSubmit}}"
            bindtap="login">
      登录
    </button>

    <!-- 微信快捷登录 -->
    <button class="btn btn-success"
            bindtap="loginByWechat"
            loading="{{!canSubmit}}">
      微信快捷登录
    </button>

    <!-- 密码登录 -->
    <button class="btn btn-outline"
            bindtap="loginByPwd">
      使用密码登录
    </button>
  </view>
</view>
】

miniprogram/pages\logs\logs.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\logs\logs.ts：
【// logs.ts
// const util = require('../../utils/util.js')
import { formatTime } from '../../utils/util'

Component({
  data: {
    logs: [],
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (wx.getStorageSync('logs') || []).map((log: string) => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          }
        }),
      })
    }
  },
})
】

miniprogram/pages\logs\logs.wxml：
【<!--logs.wxml-->
<navigation-bar title="查看启动日志" back="{{true}}" color="black" background="#FFF"></navigation-bar>
<scroll-view class="scrollarea" scroll-y type="list">
  <block wx:for="{{logs}}" wx:key="timeStamp" wx:for-item="log">
    <view class="log-item">{{index + 1}}. {{log.date}}</view>
  </block>
</scroll-view>
】

miniprogram/pages\mine\mine.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\mine\mine.ts：
【import { ensureLogin, updateUserInfo } from "../../utils/util";
// pages/mine/mine.ts
Page({
  data: {
    userInfo: null as { avatarUrl: string, nickName: string } | null,
  },
  /** 页面每次可见都刷新一下用户信息 */
  onShow() {
    const userInfo = wx.getStorageSync('userInfo');
    this.setData({
      userInfo: userInfo || null,  // 为空时下方 WXML 会自动给出“立即登录”
    });
  },
  onLoad() {},
  goToLogin() {
    wx.navigateTo({
      url: '/pages/login/login',
    });
  },

  /**
   * 响应用户选择头像
   */
  async onChooseAvatar(e: any) {
    const { avatarUrl } = e.detail;
    if (!avatarUrl || !this.data.userInfo) return;

    wx.showLoading({ title: '上传中...' });
    try {
      // ① 调后端保存
      const user = await updateUserInfo({ avatarUrl });

      // ② 更新本地 & 页面
      wx.setStorageSync('userInfo', user);
      this.setData({ userInfo: user });

      wx.showToast({ title: '头像已更新', icon: 'success' });
    } catch (err) {
      wx.showToast({ title: '上传失败', icon: 'none' });
    } finally {
      wx.hideLoading();
    }
  },

  /**
   * 响应用户修改昵称
   */
  async onNicknameBlur(e: any) {
    const nickName = (e.detail.value || '').trim();
    if (!nickName) {
      wx.showToast({ title: '昵称不能为空', icon: 'none' });
      return;
    }

    wx.showLoading({ title: '保存中...' });
    try {
      const user = await updateUserInfo({ nickName });

      wx.setStorageSync('userInfo', user);
      this.setData({ userInfo: user });

      wx.showToast({ title: '昵称已更新', icon: 'success' });
    } catch {
      wx.showToast({ title: '保存失败', icon: 'none' });
    } finally {
      wx.hideLoading();
    }
  },

  goToPendingPay() { if (!ensureLogin()) return; /* 跳转 */ },
  goToOngoing()    { if (!ensureLogin()) return; /* 跳转 */ },
  goToPendingComment() { if (!ensureLogin()) return; /* 跳转 */ },
  goToAllOrders()  { if (!ensureLogin()) return; /* 跳转 */ },
  contactService() { if (!ensureLogin()) return; /* … */ },
});】

miniprogram/pages\mine\mine.wxml：
【<navigation-bar title="个人中心" back="{{false}}" color="black" background="#ffffff"></navigation-bar>
<view class="mine-container">
  <view class="header-gradient">
    <block wx:if="{{userInfo}}">
      <button class="avatar-button" open-type="chooseAvatar" bind:chooseavatar="onChooseAvatar">
        <image class="avatar" src="{{userInfo.avatarUrl || '/assets/images/icons/defaultUser.svg'}}"></image>
      </button>
      <view class="user-info">
        <input 
          type="nickname" 
          class="nickname-input" 
          value="{{userInfo.nickName}}" 
          bind:blur="onNicknameBlur" 
          placeholder="请填写昵称"
        />
        <text wx:if="{{userInfo.nickName}}" class="user-id">ID: 123456</text>
      </view>
    </block>

    <block wx:else>
      <view class="login-prompt" bindtap="goToLogin">
        <image class="avatar" src="{{userInfo.avatarUrl || '/assets/images/icons/defaultUser.svg'}}"></image>
        <view class="user-info">
          <text class="nickname">{{userInfo.nickName || '立即登录'}}</text>
        </view>
      </view>
    </block>
  </view>

  <view class="order-card">
    <view class="order-header">
      <text class="order-title">陪玩订单</text>
      <navigator url="/pages/order/order" class="order-all">全部 </navigator>
    </view>
    <view class="order-status">
      <view class="status-item" bindtap="goToPendingPay">
        <image class="status-icon" src="/assets/images/icons/wallet.png"/>
        <text>待付款</text>
      </view>
      <view class="status-item" bindtap="goToOngoing">
        <image class="status-icon" src="/assets/images/icons/going.png"/>
        <text>进行中</text>
      </view>
      <view class="status-item" bindtap="goToPendingComment">
        <image class="status-icon" src="/assets/images/icons/star.png"/>
        <text>待评价</text>
      </view>
      <view class="status-item" bindtap="goToAllOrders">
        <image class="status-icon" src="/assets/images/icons/document.png"/>
        <text>全部订单</text>
      </view>
    </view>
  </view>

  <view class="menu-list">
    <navigator class="menu-item" url="/pages/about/about">
      <text>关于我们</text>
      <text class="arrow"></text>
    </navigator>
    <view class="menu-item" bindtap="contactService">
      <text>我的客服</text>
      <text class="arrow"></text>
    </view>
    <view class="menu-item" bindtap="openSetting">
      <text>设置</text>
      <text class="arrow"></text>
    </view>
  </view>
</view>】

miniprogram/pages\product-detail\product-detail.json：
【{ "usingComponents": { "navigation-bar": "/components/navigation-bar/navigation-bar" } }】

miniprogram/pages\product-detail\product-detail.ts：
【import { request } from '../../utils/request';
import { ensureLogin } from '../../utils/util';

Page({
  data: {
    product: null as Product | null,
    isFavorited: false, // 默认未收藏
    comments: [] as Comment[], 
  },

  onLoad(options: { id?: string }) {
    if (options.id) {
      this.loadProductDetail(options.id);
    }
  },

  loadProductDetail(productId: string) {
    wx.showLoading({ title: '加载中...' });
    request({ url: `/shop/products/${productId}` })
      .then(product => {
        // 假设接口返回 product.isFavorited 字段用于收藏状态
        this.setData({ 
          product, 
          isFavorited: product.isFavorited || false 
        });
        this.checkFavoriteStatus(product.id);
        this.loadComments(product.id);
        wx.hideLoading();
      })
      .catch(() => wx.hideLoading());
  },
  loadComments(productId: number) {
    request({ url: `/comments`, data: { productId } })
      .then((comments: Comment[]) => {
        // 为了复用现有 WXML，先做一次映射
        const formatted = comments.map(c => ({
          id: c.id,
          username: c.username,
          avatar: c.avatar,
          content: c.content,
          rating: c.rating ?? 5,
          timestamp: c.timestamp,
        }));
        this.setData({ comments: formatted });
      })
      .catch(() => {
        wx.showToast({ title: '评论加载失败', icon: 'none' });
      });
  },


  onBackToShop() {
    wx.navigateBack();
  },
  onBuyNow() {
    if (!ensureLogin()) return;
    wx.navigateTo({
      url: `/pages/order-confirm/order-confirm?id=${this.data.product?.id}`,
    });
  },

  onToggleFavorite() {
    if (!ensureLogin()) return;           // 未登录先跳登录
    const { isFavorited, product } = this.data;
    this.syncFavorite(product!.id, !isFavorited)
        .then(() => {
          this.setData({ isFavorited: !isFavorited });
          wx.showToast({ title: isFavorited ? '已取消收藏' : '已收藏', icon: 'success' });
        })
        .catch(() => wx.showToast({ title: '操作失败', icon: 'none' }));
  },
  /** 查询是否已收藏（有 token 时才发请求） */
  checkFavoriteStatus(productId: number) {
    const token = wx.getStorageSync('token');
    if (!token) return;           // 未登录直接跳过
    request({ url: `/favorites/${productId}` })
      .then((fav: boolean) => this.setData({ isFavorited: fav }));
  },

  /** 后端同步收藏状态 */
  syncFavorite(productId: number, add: boolean) {
    const method = add ? 'POST' : 'DELETE';
    const url    = add ? '/favorites' : `/favorites/${productId}`;
    const data   = add ? { productId } : undefined;
    return request({ url, method, data });
  },

  onShareAppMessage() {
    return {
      title: this.data.product ? this.data.product.name : '查看商单详情',
      path: `/pages/product-detail/product-detail?id=${this.data.product?.id}`,
    };
  }
});
】

miniprogram/pages\product-detail\product-detail.wxml：
【<navigation-bar title="商品详情" back="{{true}}" color="black" background="#FFF"></navigation-bar>

<view class="page-container" wx:if="{{product}}">
  <image class="product-image" src="{{product.imageUrl}}" mode="widthFix"></image>

  <view class="info-card">
    <view class="price-section">
      <view class="price-wrapper">
        <text class="price-symbol">¥</text>
        <text class="price-main">{{product.price}}</text>
      </view>
      <view class="old-price">¥38888.00</view>
      <view class="favorite-btn" bindtap="onToggleFavorite">
        <image 
          class="favorite-icon" 
          src="{{isFavorited ? '/assets/images/icons/heart-fill.svg' : '/assets/images/icons/heart_line.svg'}}"
        />
      </view>
    </view>
    <view class="product-title-section">
        <view class="product-name">{{product.name}}</view>
        <view class="product-subname">两万八千八百八十八，非心复苏带回家 (赵哥专属)</view>
    </view>
  </view>
  
  <view class="shop-card">
    <image class="shop-logo" src="/assets/images/icons/defaultUser.svg"></image>
    <view class="shop-info">
      <text class="shop-name">速凌电竞</text>
      <text class="shop-fans">1938粉丝</text>
    </view>
    <button class="follow-btn">+ 关注</button>
  </view>

  <view class="detail-card">
    <view class="card-title">详情</view>
    <view class="detail-content">
      <text>{{product.description}}</text>
      <text>\n\n1.下单之后等待打手接单，打手接单后10分钟之内，打手将根据老板您所提供的游戏昵称或ID,添加您的游戏好友如若15分钟之内没有打手添加您的好友，您可以扫码或直接联系客服。</text>
      <text>\n\n2.速凌电竞俱乐部，所有订单不卡保底，以最终撤离为准</text>
    </view>
  </view>

  <view class="comment-card">
  <view class="card-title">用户评论</view>
  <view class="comment-item" wx:for="{{comments}}" wx:key="id">
    <view class="comment-header">
      <image class="avatar" src="{{item.avatar}}" />
      <view class="user-info">
        <text class="username">{{item.username}}</text>
        <text class="timestamp">{{item.timestamp}}</text>
      </view>
    </view>
    <view class="comment-content">{{item.content}}</view>
  </view>
  <view wx:if="{{comments.length === 0}}" class="no-comment">
  <image class="empty-sofa-image" src="/assets/images/icons/empty-sofa.svg" mode="widthFix"></image>
  <text>暂无更多评论</text>
</view>
</view>


</view>

<view class="loading-container" wx:else>
  <text>商品加载中或已下架...</text>
</view>

<view class="bottom-bar">
  <view class="shop-entry" bindtap="onBackToShop">
    <image class="shop-icon" src="/assets/images/icons/shop.svg"></image>
    <text>店铺</text>
  </view>
  <button class="buy-now-btn" bindtap="onBuyNow">立即购买</button>
</view>


】

miniprogram/pages\shop\shop.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\shop\shop.ts：
【import { request } from '../../utils/request';

Page({
  data: {
    swiperItems: [], // 
    navItems: [],
    products: [] // 
  },

  onLoad() {
    this.loadShopData();
  },
  
  loadShopData() {
    wx.showLoading({ title: '加载中...' });

    // Fetch all data in parallel
    Promise.all([
      request({ url: '/shop/banners' }), // 
      request({ url: '/shop/categories' }), // 
      request({ url: '/shop/products/featured' }) // 
    ]).then(([banners, categories, products]) => {
      // The backend doesn't provide icons for categories, so we add them here
      const navIcons = [
          '/assets/images/icons/rank-up.svg', 
          '/assets/images/icons/pro-player.svg', 
          '/assets/images/icons/tutorial.svg'
      ];
      const navItems = categories.map((category: {name: string}, index: number) => ({
        name: category.name,
        iconUrl: navIcons[index] || '/assets/images/icons/fun-game.svg' // Provide a default icon
      }));

      this.setData({
        swiperItems: banners,
        navItems: navItems,
        products: products
      });
      wx.hideLoading();
    }).catch(err => {
      console.error("Failed to load shop data", err);
      wx.hideLoading();
      wx.showToast({ title: '数据加载失败', icon: 'none' });
    });
  },
});】

miniprogram/pages\shop\shop.wxml：
【<navigation-bar title="店铺" back="{{false}}" color="black" background="#FFF"></navigation-bar>
<view class="shop-container">
  <view class="search-bar">
    <input class="search-input" placeholder="搜索大神或服务" />
  </view>

  <swiper class="promo-swiper" indicator-dots autoplay circular>
    <swiper-item wx:for="{{swiperItems}}" wx:key="index">
      <image src="{{item.imageUrl}}" class="swiper-image" mode="widthFix"/>
    </swiper-item>
  </swiper>

  <view class="icon-nav">
    <view class="nav-item" wx:for="{{navItems}}" wx:key="index">
      <image src="{{item.iconUrl}}" class="nav-icon"/>
      <text class="nav-text">{{item.name}}</text>
    </view>
  </view>

  <view class="recommend-section">
    <view class="section-title">精选推荐</view>
    <view class="product-list">
      <navigator url="/pages/product-detail/product-detail?id={{item.id}}" class="product-card" wx:for="{{products}}" wx:key="id">
        <image class="product-image" src="{{item.imageUrl}}" mode="aspectFill"></image>
        <view class="product-info">
          <view class="product-name">{{item.name}}</view>
          <view class="product-meta">
            <text class="product-views">{{item.views}}人浏览</text>
            <text class="product-sales">已售{{item.sales}}</text> </view>
          <view class="product-price">¥{{item.price}}</view>
        </view>
      </navigator>
    </view>
  </view>
</view>】

miniprogram/pages\zone\zone.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\zone\zone.ts：
【import { request } from '../../utils/request';


Page({
  data: {
    categories: [] as Category[], // 
    products: [] as Product[],
    activeCategoryId: null, // Start with no category selected
    activeCategoryName: '', // 新增字段
  },

  onLoad() {
    this.loadCategories();
  },

  loadCategories() {
    request({ url: '/shop/categories' }).then(categories => { // 
      this.setData({
        categories: categories,
        activeCategoryId: categories.length > 0 ? categories[0].id : null,
        activeCategoryName: categories.length > 0 ? categories[0].name : '',
      });
      if (this.data.activeCategoryId) {
        this.loadProducts(); // 
      }
    });
  },

  onCategoryTap(e: any) {
    const id = e.currentTarget.dataset.id;
    const name = e.currentTarget.dataset.name;
    if (id === this.data.activeCategoryId) return;
    this.setData({ activeCategoryId: id ,activeCategoryName: name});
    this.loadProducts();
  },
  
  loadProducts() {
    if (!this.data.activeCategoryId) return;
    wx.showLoading({ title: '加载中...' });
    request({ url: `/shop/products?categoryId=${this.data.activeCategoryId}` }).then(products => { // 
      this.setData({ products: products });
      wx.hideLoading();
    }).catch(() => wx.hideLoading());
  }
});】

miniprogram/pages\zone\zone.wxml：
【<navigation-bar title="专区" back="{{false}}" color="black" background="#FFF"></navigation-bar>

<view class="zone-container">
  <!-- 左侧分类栏 -->
  <scroll-view class="category-sidebar" scroll-y>
    <view
      wx:for="{{categories}}"
      wx:key="id"
      class="category-item {{activeCategoryId === item.id ? 'active' : ''}}"
      bindtap="onCategoryTap"
      data-id="{{item.id}}">
      <view class="indicator" wx:if="{{activeCategoryId === item.id}}"></view>
      {{item.name}}
    </view>
  </scroll-view>

  <!-- 右侧内容 -->
  <scroll-view class="product-content" scroll-y>
    <!-- 当前分类名称 -->
    <view class="category-title">{{activeCategoryName}}</view>

    <view class="product-list">
      <navigator 
        url="/pages/product-detail/product-detail?id={{item.id}}" 
        class="product-card-zone" 
        wx:for="{{products}}" 
        wx:key="id">
        <image class="product-image-zone" src="{{item.imageUrl}}" mode="aspectFill"></image>
        <view class="product-info-zone">
          <view class="product-name-zone">{{item.name}}</view>
          <view class="product-sales-zone">已售{{item.sales}}</view>
          <view class="product-price-zone">¥{{item.price}}</view>
        </view>
      </navigator>
    </view>
  </scroll-view>
</view>
】

miniprogram/utils\interface.ts：
【
type Product = { id: number; name: string; price: string; sales: number; imageUrl: string; }; // 

type Category = {id: number; name: string;};


type Comment = {
  id: number;
  username: string;   // 后端返回的 user.nickName
  avatar: string;     // user.avatarUrl
  content: string;
  rating: number;
  timestamp: string;  // ISO 日期或已格式化
};
】

miniprogram/utils\request.ts：
【// utils/request.ts
const BASE_URL = 'http://127.0.0.1:8080/api';

type RequestOptions = {
  url: string;
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  data?: any;
  header?: WechatMiniprogram.IAnyObject;   // 新增，方便外部自定义
};

export const request = (options: RequestOptions): Promise<any> => {
  const token = wx.getStorageSync('token');               // ← 取本地 token
  const headers = {
    ...(options.header || {}),
    ...(token ? { Authorization: `Bearer ${token}` } : {})   // 自动带 token，不用逐个手动塞 header
  };

  return new Promise((resolve, reject) => {
    wx.request({
      url: BASE_URL + options.url,
      method: options.method || 'GET',
      data: options.data || {},
      header: headers,                                      // ← 带上去
      success: (res) => {
        // 后端用 401 / 403 表示未登录或 token 失效
        if (res.statusCode === 401 || res.statusCode === 403) {
          handleAuthFail();
          reject(res);
          return;
        }
        if (res.statusCode === 200) {
          resolve(res.data);
        } else {
          reject(res);
        }
      },
      fail: (err) => {
        wx.showToast({ title: '请求失败', icon: 'none' });
        reject(err);
      },
    });
  });
};

/** 统一处理登录失效 */
function handleAuthFail() {
  wx.removeStorageSync('token');
  wx.showModal({
    title: '请先登录',
    content: '登录状态已失效，请重新登录',
    confirmText: '去登录',
    success(res) {
      if (res.confirm) {
        wx.redirectTo({ url: '/pages/login/login' });
      }
    }
  });
}
】

miniprogram/utils\util.ts：
【import { request } from "./request"

export const formatTime = (date: Date) => {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  return (
    [year, month, day].map(formatNumber).join('/') +
    ' ' +
    [hour, minute, second].map(formatNumber).join(':')
  )
}

const formatNumber = (n: number) => {
  const s = n.toString()
  return s[1] ? s : '0' + s
}

export function ensureLogin(): boolean {
  const token = wx.getStorageSync('token');
  if (token) return true;
  wx.showToast({ title: '请先登录', icon: 'none' });
  setTimeout(() => {
    wx.navigateTo({ url: '/pages/login/login' });
  }, 600);
  return false;
}

/** 只把需要改的字段丢进来即可（avatarUrl / nickName） */
export const updateUserInfo = (payload: Partial<{ nickName: string; avatarUrl: string; }>) =>
  request({
    url: '/users/me',
    method: 'PUT',
    data: payload,   // { nickName?, avatarUrl? }
  });】

esports/src\main\java\com\esports\esports\EsportsApplication.java：
【package com.esports.esports;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EsportsApplication {

	public static void main(String[] args) {
		SpringApplication.run(EsportsApplication.class, args);
	}

}
】

esports/src\main\java\com\esports\esports\config\DataInitializer.java：
【package com.esports.esports.config;

import com.esports.esports.model.*;
import com.esports.esports.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.List;

@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "app.init-data", havingValue = "true") //当 app.init-data=false（默认值）时，整个 DataInitializer 都不会注册
public class DataInitializer implements CommandLineRunner {

    private final CategoryRepository categoryRepository;
    private final ProductRepository productRepository;
    private final BannerRepository bannerRepository;
    private final UserRepository userRepository;
    private final PlayerOrderRepository playerOrderRepository;
    private final CommentRepository commentRepository;


    @Override
    public void run(String... args) throws Exception {

        System.out.println("执行数据初始化...");
        // Clear existing data for a clean slate on restart
        playerOrderRepository.deleteAll();
        productRepository.deleteAll();
        categoryRepository.deleteAll();
        bannerRepository.deleteAll();
        userRepository.deleteAll();
        commentRepository.deleteAll();
        
        // Create Categories
        Category lol = new Category();
        lol.setName("英雄联盟");
        categoryRepository.save(lol);

        Category wzry = new Category();
        wzry.setName("王者荣耀");
        categoryRepository.save(wzry);

        Category jcc = new Category();
        jcc.setName("金铲铲");
        categoryRepository.save(jcc);

        // Create Products
        Product p1 = new Product();
        p1.setCategory(wzry);
        p1.setName("王者荣耀-荣耀王者陪练");
        p1.setPrice(new BigDecimal("50.00"));
        p1.setSales(120);
        p1.setViews(1500);
        p1.setImageUrl("/assets/images/mock/banner1.png");
        p1.setDescription("这里是详细的服务描述，介绍服务内容、时长、以及注意事项等。");

        Product p2 = new Product();
        p2.setCategory(lol);
        p2.setName("英雄联盟-钻石到大师");
        p2.setPrice(new BigDecimal("300.00"));
        p2.setSales(45);
        p2.setViews(2300);
        p2.setImageUrl("/assets/images/mock/banner2.png");
        p2.setDescription("专业打手，快速上分，安全可靠。");
        
        Product p3 = new Product();
        p3.setCategory(jcc);
        p3.setName("金铲铲-大师教学局");
        p3.setPrice(new BigDecimal("30.00"));
        p3.setSales(300);
        p3.setViews(800);
        p3.setImageUrl("/assets/images/mock/banner3.png");
        p3.setDescription("顶级思路教学，助你轻松上大师。");

        productRepository.saveAll(List.of(p1, p2, p3));

        // Create Banners
        Banner b1 = new Banner();
        b1.setImageUrl("/assets/images/mock/banner1.png");
        Banner b2 = new Banner();
        b2.setImageUrl("/assets/images/mock/banner2.png");
        Banner b3 = new Banner();
        b3.setImageUrl("/assets/images/mock/banner3.png");
        bannerRepository.saveAll(List.of(b1, b2, b3));
        
        // Create a Mock User and Orders
        User mockUser = new User();
        mockUser.setNickName("电竞大神");
        mockUser.setAvatarUrl("/assets/images/icons/defaultUser.svg");
        mockUser.setOpenId("mock_openid_12345"); // Example openid
        userRepository.save(mockUser);
        
        PlayerOrder order1 = new PlayerOrder();
        order1.setUser(mockUser);
        order1.setProduct(p1);
        order1.setStatus(OrderStatus.ONGOING);

        PlayerOrder order2 = new PlayerOrder();
        order2.setUser(mockUser);
        order2.setProduct(p3);
        order2.setStatus(OrderStatus.PENDING_PAYMENT);

        playerOrderRepository.saveAll(List.of(order1, order2));

        Comment c1 = new Comment();
        c1.setProduct(p1);
        c1.setUser(mockUser);
        c1.setContent("老板技术好、服务也好，五星好评！");
        c1.setRating(5);

        commentRepository.save(c1);

    }
}】

esports/src\main\java\com\esports\esports\config\RedisConfig.java：
【package com.esports.esports.config;

import io.lettuce.core.RedisClient;
import io.lettuce.core.RedisURI;
import io.lettuce.core.api.StatefulRedisConnection;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RedisConfig {

    @Value("${redis.host}")
    private String host;

    @Value("${redis.port}")
    private int port;

    @Value("${redis.username}")
    private String username;

    @Value("${redis.password}")
    private String password;

    @Bean
    public RedisClient redisClient() {
        RedisURI uri = RedisURI.Builder
            .redis(host, port)
            .withAuthentication(username, password)
            .build();

        return RedisClient.create(uri);
    }

    @Bean
    public StatefulRedisConnection<String, String> redisConnection(RedisClient client) {
        return client.connect();
    }
}
】

esports/src\main\java\com\esports\esports\controller\CommentController.java：
【package com.esports.esports.controller;

import com.esports.esports.model.Comment;
import com.esports.esports.service.CommentService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/comments")
@RequiredArgsConstructor
public class CommentController {

    private final CommentService commentService;

    /** GET /comments?productId=123 */
    @GetMapping
    public ResponseEntity<List<Comment>> list(@RequestParam Long productId) {
        return ResponseEntity.ok(commentService.getCommentsByProduct(productId));
    }

    /** POST /comments  （需要登录态，这里仅演示） */
    @PostMapping
    public ResponseEntity<Comment> create(@RequestBody Comment comment) {
        return ResponseEntity.ok(commentService.addComment(comment));
    }
}
】

esports/src\main\java\com\esports\esports\controller\FavoriteController.java：
【package com.esports.esports.controller;

import com.esports.esports.service.AuthService;
import com.esports.esports.service.FavoriteService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RequiredArgsConstructor
@RestController
@RequestMapping("/favorites")
public class FavoriteController {

    private final FavoriteService favoriteService;
    private final AuthService authService;   // ← 新增

    /** 是否收藏 */
    @GetMapping("/{productId}")
    public ResponseEntity<Boolean> isFavorited(@RequestHeader("Authorization") String authHeader,
                                               @PathVariable Long productId) {
        Long uid = authService.currentUserId(authHeader);
        return ResponseEntity.ok(favoriteService.isFavorited(uid, productId));
    }

    /** 收藏列表 */
    @GetMapping
    public ResponseEntity<List<Long>> listFavorites(@RequestHeader("Authorization") String authHeader) {
        Long uid = authService.currentUserId(authHeader);
        return ResponseEntity.ok(favoriteService.listFavorites(uid));
    }

    /** 新增收藏 */
    @PostMapping
    public ResponseEntity<Void> addFavorite(@RequestHeader("Authorization") String authHeader,
                                            @RequestBody FavoriteReq body) {
        if (body.productId() == null) return ResponseEntity.badRequest().build();
        Long uid = authService.currentUserId(authHeader);
        favoriteService.addFavorite(uid, body.productId());
        return ResponseEntity.ok().build();
    }

    /** 取消收藏 */
    @DeleteMapping("/{productId}")
    public ResponseEntity<Void> removeFavorite(@RequestHeader("Authorization") String authHeader,
                                               @PathVariable Long productId) {
        Long uid = authService.currentUserId(authHeader);
        favoriteService.removeFavorite(uid, productId);
        return ResponseEntity.ok().build();
    }

    /** 仅含 productId 字段的简单 DTO */
    public record FavoriteReq(Long productId) { }
}
】

esports/src\main\java\com\esports\esports\controller\OrderController.java：
【package com.esports.esports.controller;

import com.esports.esports.model.PlayerOrder;
import com.esports.esports.model.OrderStatus;
import com.esports.esports.service.AuthService;
import com.esports.esports.service.OrderService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RequiredArgsConstructor
@RestController
@RequestMapping("/orders")
public class OrderController {

    private final OrderService orderService;
    private final AuthService  authService;  // ← 新增

    @GetMapping
    public ResponseEntity<List<PlayerOrder>> getUserOrders(@RequestHeader("Authorization") String authHeader,
                                                           @RequestParam(required = false) String status) {
        Long uid = authService.currentUserId(authHeader);

        if (status != null && !status.isEmpty()) {
            try {
                OrderStatus orderStatus = OrderStatus.valueOf(status.toUpperCase());
                return ResponseEntity.ok(orderService.getOrdersForUserByStatus(uid, orderStatus));
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest().build();
            }
        }
        return ResponseEntity.ok(orderService.getOrdersForUser(uid));
    }
}
】

esports/src\main\java\com\esports\esports\controller\ShopController.java：
【package com.esports.esports.controller;

import com.esports.esports.model.Banner;
import com.esports.esports.model.Category;
import com.esports.esports.model.Product;
import com.esports.esports.service.ShopService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/shop")
@RequiredArgsConstructor
public class ShopController {

    private final ShopService shopService;

    @GetMapping("/banners")
    public ResponseEntity<List<Banner>> getBanners() {
        return ResponseEntity.ok(shopService.getBanners());
    }

    @GetMapping("/categories")
    public ResponseEntity<List<Category>> getCategories() {
        return ResponseEntity.ok(shopService.getAllCategories());
    }

    @GetMapping("/products/featured")
    public ResponseEntity<List<Product>> getFeaturedProducts() {
        return ResponseEntity.ok(shopService.getFeaturedProducts());
    }

    @GetMapping("/products")
    public ResponseEntity<List<Product>> getProducts(
            @RequestParam(required = false) Long categoryId,
            @RequestParam(required = false) String searchQuery) {
        if (categoryId != null) {
            return ResponseEntity.ok(shopService.getProductsByCategoryId(categoryId));
        }
        if (searchQuery != null && !searchQuery.isEmpty()) {
            return ResponseEntity.ok(shopService.searchProducts(searchQuery));
        }
        // Default to featured if no params
        return ResponseEntity.ok(shopService.getFeaturedProducts());
    }
    
    @GetMapping("/products/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        return shopService.getProductById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}】

esports/src\main\java\com\esports\esports\controller\UserController.java：
【package com.esports.esports.controller;

import java.util.Collections;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.esports.esports.model.LoginRequest;
import com.esports.esports.service.WxLoginService;


@RestController
@RequestMapping("/wxlogin")
public class UserController {

    @Autowired
    private WxLoginService wxLoginService;

    @PostMapping
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        String code = request.getCode();
        if (code == null || code.isEmpty()) {
            return ResponseEntity.badRequest().body("code is required");
        }

        Map<String, Object> map = wxLoginService.loginWithCode(request);

        return ResponseEntity.ok(map);
    }
    
}
】

esports/src\main\java\com\esports\esports\controller\UserProfileController.java：
【package com.esports.esports.controller;

import com.esports.esports.model.User;
import com.esports.esports.repository.UserRepository;
import com.esports.esports.service.AuthService;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

@RequiredArgsConstructor
@RestController
@RequestMapping("/users")
public class UserProfileController {

    private final UserRepository userRepo;
    private final AuthService    authService;   // ← 新增

    /** 修改头像 / 昵称 */
    @PutMapping("/me")
    public ResponseEntity<User> updateProfile(@RequestHeader("Authorization") String authHeader,
                                              @RequestBody UpdateReq body) {

        Long uid = authService.currentUserId(authHeader);
        User user = userRepo.findById(uid)
                            .orElseThrow(() -> new RuntimeException("User not found"));

        if (StringUtils.hasText(body.nickName()))
            user.setNickName(body.nickName().trim());
        if (StringUtils.hasText(body.avatarUrl()))
            user.setAvatarUrl(body.avatarUrl().trim());

        return ResponseEntity.ok(userRepo.save(user));
    }
    /** 简单 DTO，只接收要改的字段 */
    public record UpdateReq(String nickName, String avatarUrl) {}
}
】

esports/src\main\java\com\esports\esports\model\Banner.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
public class Banner {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String imageUrl;
    
    // Optional: link to a product detail page or other internal page
    private String linkUrl;
}】

esports/src\main\java\com\esports\esports\model\Category.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;
}】

esports/src\main\java\com\esports\esports\model\Comment.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Entity
public class Comment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** 关联的商品 */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    /** 发表用户 */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /** 文本内容（必填） */
    @Column(nullable = false, length = 1_000)
    private String content;

    /** 1-5 星，留作评分用，可选 */
    private Integer rating = 5;

    /** 创建时间 */
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
    }
}
】

esports/src\main\java\com\esports\esports\model\LoginRequest.java：
【package com.esports.esports.model;

import lombok.Data;

@Data
public class LoginRequest {
    private String code;              // wx.login 拿到
    private WxUserInfoDTO userInfo;   // 头像、昵称、gender …
}
】

esports/src\main\java\com\esports\esports\model\OrderStatus.java：
【package com.esports.esports.model;

public enum OrderStatus {
    PENDING_PAYMENT, // 待付款
    ONGOING,         // 进行中
    PENDING_COMMENT,       // 待评价 (业务上可以认为是已完成)
    REFUNDED         // 已退款或售后
}】

esports/src\main\java\com\esports\esports\model\PlayerOrder.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Data
@Entity
public class PlayerOrder {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private OrderStatus status;

    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
    }
}】

esports/src\main\java\com\esports\esports\model\Product.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;
import java.math.BigDecimal;

@Data
@Entity
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(precision = 10, scale = 2)
    private BigDecimal price;

    private Integer sales;
    private Integer views;
    private String imageUrl;
    private String description;

    // @ManyToOne(fetch = FetchType.LAZY)
    @ManyToOne(fetch = FetchType.EAGER) 
    @JoinColumn(name = "category_id")
    private Category category;
}】

esports/src\main\java\com\esports\esports\model\User.java：
【package com.esports.esports.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Data
@Entity
@Table(name = "app_user") // "user" can be a reserved keyword in some SQL dialects
@Getter
@Setter
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true) // WeChat OpenID
    private String openId;

    private String nickName;
    private String avatarUrl;
}】

esports/src\main\java\com\esports\esports\model\WxUserInfoDTO.java：
【package com.esports.esports.model;

import lombok.Data;

@Data
public class  WxUserInfoDTO{
    private String nickName;
    private String avatarUrl;
    private Integer gender; // 0: 未知, 1: 男, 2: 女
    private String province;
    private String city;
    private String country;
}】

esports/src\main\java\com\esports\esports\repository\BannerRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.Banner;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BannerRepository extends JpaRepository<Banner, Long> {
}】

esports/src\main\java\com\esports\esports\repository\CategoryRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {
}】

esports/src\main\java\com\esports\esports\repository\CommentRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.Comment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CommentRepository extends JpaRepository<Comment, Long> {
    List<Comment> findByProductIdOrderByCreatedAtDesc(Long productId);
}
】

esports/src\main\java\com\esports\esports\repository\PlayerOrderRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.PlayerOrder;
import com.esports.esports.model.OrderStatus;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface PlayerOrderRepository extends JpaRepository<PlayerOrder, Long> {
    // Find orders by user ID
    List<PlayerOrder> findByUserId(Long userId);
    
    // Find orders by user ID and a specific status
    List<PlayerOrder> findByUserIdAndStatus(Long userId, OrderStatus status);
}】

esports/src\main\java\com\esports\esports\repository\ProductRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {
    // Find products by category ID
    List<Product> findByCategoryId(Long categoryId);
    
    // Find products by name containing a search string
    List<Product> findByNameContainingIgnoreCase(String name);
}】

esports/src\main\java\com\esports\esports\repository\UserRepository.java：
【package com.esports.esports.repository;

import com.esports.esports.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByOpenId(String openId);
}
】

esports/src\main\java\com\esports\esports\service\AuthService.java：
【package com.esports.esports.service;

import com.esports.esports.model.User;
import com.esports.esports.repository.UserRepository;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final StatefulRedisConnection<String, String> redis;
    private final UserRepository userRepo;

    /**
     * 从 Authorization 头取出 Bearer token → openid → userId
     */
    public Long currentUserId(String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer "))
            throw unauth("缺少或非法 Authorization 头");

        String token = authHeader.substring(7).trim();
        RedisCommands<String, String> cmd = redis.sync();
        String openid = cmd.get("login_token:" + token);
        if (openid == null)
            throw unauth("token 已过期，请重新登录");

        User user = userRepo.findByOpenId(openid)
                            .orElseThrow(() -> unauth("用户不存在，请先注册"));
        return user.getId();
    }

    private ResponseStatusException unauth(String msg) {
        return new ResponseStatusException(HttpStatus.UNAUTHORIZED, msg);
    }
}
】

esports/src\main\java\com\esports\esports\service\CommentService.java：
【package com.esports.esports.service;

import com.esports.esports.model.Comment;
import com.esports.esports.repository.CommentRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CommentService {

    private final CommentRepository commentRepository;

    /** 查询指定商品的全部评论（按时间倒序） */
    public List<Comment> getCommentsByProduct(Long productId) {
        return commentRepository.findByProductIdOrderByCreatedAtDesc(productId);
    }

    /** 简易添加接口 */
    public Comment addComment(Comment c) {
        return commentRepository.save(c);
    }
}
】

esports/src\main\java\com\esports\esports\service\FavoriteService.java：
【package com.esports.esports.service;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 纯 Redis 收藏功能实现, 双向收藏：
 *   fav:user:{uid}   -> Set<productId>
 *   fav:prod:{pid}   -> Set<userId>
 */
@Service
@RequiredArgsConstructor
public class FavoriteService {

    private final StatefulRedisConnection<String, String> redis;

    private RedisCommands<String, String> cmd() {
        return redis.sync();
    }

    private static String userKey(Long uid) {
        return "fav:user:" + uid;
    }

    private static String productKey(Long pid) {
        return "fav:prod:" + pid;
    }

    /**
     * 添加收藏。
     *
     * @return true = 第一次收藏，false = 已收藏过
     */
    public boolean addFavorite(Long userId, Long productId) {
        long added = cmd().sadd(userKey(userId), productId.toString());
        cmd().sadd(productKey(productId), userId.toString()); // 双写，方便统计
        return added == 1;
    }

    /**
     * 取消收藏。
     *
     * @return true = 原本已收藏并成功删除，false = 原本就没收藏
     */
    public boolean removeFavorite(Long userId, Long productId) {
        long removed = cmd().srem(userKey(userId), productId.toString());
        cmd().srem(productKey(productId), userId.toString());
        return removed == 1;
    }

    /**
     * 判断是否已收藏。
     */
    public boolean isFavorited(Long userId, Long productId) {
        return cmd().sismember(userKey(userId), productId.toString());
    }

    /**
     * 用户收藏列表。
     */
    public List<Long> listFavorites(Long userId) {
        Set<String> ids = cmd().smembers(userKey(userId));
        return ids.stream().map(Long::valueOf).collect(Collectors.toList());
    }

    /**
     * 某商品被收藏的用户数。
     */
    public long countFavorites(Long productId) {
        return cmd().scard(productKey(productId));
    }
}】

esports/src\main\java\com\esports\esports\service\OrderService.java：
【package com.esports.esports.service;

import com.esports.esports.model.PlayerOrder;
import com.esports.esports.model.OrderStatus;
import com.esports.esports.repository.PlayerOrderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
public class OrderService {
    
    private final PlayerOrderRepository orderRepository;

    public List<PlayerOrder> getOrdersForUser(Long userId) {
        return orderRepository.findByUserId(userId);
    }

    public List<PlayerOrder> getOrdersForUserByStatus(Long userId, OrderStatus status) {
        return orderRepository.findByUserIdAndStatus(userId, status);
    }
}】

esports/src\main\java\com\esports\esports\service\ShopService.java：
【package com.esports.esports.service;

import com.esports.esports.model.Banner;
import com.esports.esports.model.Category;
import com.esports.esports.model.Product;
import com.esports.esports.repository.BannerRepository;
import com.esports.esports.repository.CategoryRepository;
import com.esports.esports.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ShopService {

    private final ProductRepository productRepository;
    private final CategoryRepository categoryRepository;
    private final BannerRepository bannerRepository;

    public List<Banner> getBanners() {
        return bannerRepository.findAll();
    }

    public List<Category> getAllCategories() {
        return categoryRepository.findAll();
    }

    public List<Product> getProductsByCategoryId(Long categoryId) {
        return productRepository.findByCategoryId(categoryId);
    }
    
    public List<Product> getFeaturedProducts() {
        // For now, we'll just return the first few products as "featured"
        // A real implementation might have a "featured" flag on the product
        return productRepository.findAll().stream().limit(3).toList();
    }

    public Optional<Product> getProductById(Long id) {
        // A simple example of incrementing views on fetch
        productRepository.findById(id).ifPresent(product -> {
            product.setViews(product.getViews() + 1);
            productRepository.save(product);
        });
        return productRepository.findById(id);
    }
     
    public List<Product> searchProducts(String query) {
        return productRepository.findByNameContainingIgnoreCase(query);
    }
}】

esports/src\main\java\com\esports\esports\service\WxLoginService.java：
【package com.esports.esports.service;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.esports.esports.model.LoginRequest;
import com.esports.esports.model.User;
import com.esports.esports.repository.UserRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import lombok.Data;
@Service
public class WxLoginService {

    @Value("${wx.appid}")
    private String appId;
    @Value("${wx.secret}")
    private String secret;

    @Autowired
    private StatefulRedisConnection<String, String> redisConnection;
    @Autowired
    private UserRepository userRepository;
    public Map<String, Object> loginWithCode(LoginRequest request) {
        // Step 1: 请求微信换 openid
        RestTemplate restTemplate = new RestTemplate();
        String url = String.format(
            "https://api.weixin.qq.com/sns/jscode2session?appid=%s&secret=%s&js_code=%s&grant_type=authorization_code",
            appId, secret, request.getCode()
        );
        String result = restTemplate.getForObject(url, String.class);
        WxSessionResponse response;
        try {
             response = new ObjectMapper().readValue(result, WxSessionResponse.class);
             // 继续处理 response
        } catch (JsonProcessingException e) {
            throw new RuntimeException("解析微信返回的 JSON 出错", e);
        }

        if (response == null || response.getOpenid() == null) {
            throw new RuntimeException("Failed to get openid from WeChat");
        }

        String openid = response.getOpenid();
        // 查询数据库中是否存在该用户, 不存在则使用默认信息创建新用户
        Optional<User> userOptional = userRepository.findByOpenId(openid);
        User user = userOptional.orElseGet(() -> {
            User newUser = new User();
            newUser.setOpenId(openid);
            newUser.setNickName("电竞大神");
            newUser.setAvatarUrl("/assets/images/icons/defaultUser.svg");
            return userRepository.save(newUser);
        });

        // Step 2: 生成 token
        String token = UUID.randomUUID().toString().replace("-", "");
        // Step 3: 存入 Redis，设置过期时间（单位：秒）
        RedisCommands<String, String> commands = redisConnection.sync();
        commands.setex("login_token:" + token, 600, openid); // 10分钟有效

        Map<String, Object> res = new HashMap<>();
        res.put("token", token);
        res.put("user", user);
        //可选： 支持用户多端登录互踢，可以同时反向存储 openid → token。

        return res;
    }
}

@Data
class WxSessionResponse {
    private String openid;
    private String session_key;
    private String unionid;
    private Integer errcode;
    private String errmsg;
}】

esports/src\main\resources\application.properties：
【# Server Configuration
server.port=8080
# 如果是初次执行(或没有创建数据库时)设为true,否则设为false
app.init-data=false 


spring.datasource.url=jdbc:mysql://127.0.0.1:3306/esports_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA (Hibernate) Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Set the base path for all controllers
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
server.servlet.context-path=/api

# WeChat Mini Program Settings
wx.appid=wx1fd9aeec7d9a63cd
wx.secret=af6a042450dd0f05c69f37404e4bbea8

redis.host=redis-13464.c246.us-east-1-4.ec2.redns.redis-cloud.com
redis.port=13464
redis.username=default
redis.password=K8PuE69Ebx4hTgDy3wfOsRRsIjW6cMTd
】

esports/src\test\java\com\esports\esports\EsportsApplicationTests.java：
【package com.esports.esports;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class EsportsApplicationTests {

	@Test
	void contextLoads() {
	}

}
】

