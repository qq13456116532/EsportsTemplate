miniprogram/components\navigation-bar\navigation-bar.json：
【{
  "component": true,
  "styleIsolation": "apply-shared",
  "usingComponents": {}
}】

miniprogram/components\navigation-bar\navigation-bar.ts：
【Component({
  options: {
    multipleSlots: true // 在组件定义时的选项中启用多slot支持
  },
  /**
   * 组件的属性列表
   */
  properties: {
    extClass: {
      type: String,
      value: ''
    },
    title: {
      type: String,
      value: ''
    },
    background: {
      type: String,
      value: ''
    },
    color: {
      type: String,
      value: ''
    },
    back: {
      type: Boolean,
      value: true
    },
    loading: {
      type: Boolean,
      value: false
    },
    homeButton: {
      type: Boolean,
      value: false,
    },
    animated: {
      // 显示隐藏的时候opacity动画效果
      type: Boolean,
      value: true
    },
    show: {
      // 显示隐藏导航，隐藏的时候navigation-bar的高度占位还在
      type: Boolean,
      value: true,
      observer: '_showChange'
    },
    // back为true的时候，返回的页面深度
    delta: {
      type: Number,
      value: 1
    },
  },
  /**
   * 组件的初始数据
   */
  data: {
    displayStyle: ''
  },
  lifetimes: {
    attached() {
      const rect = wx.getMenuButtonBoundingClientRect()
      wx.getSystemInfo({
        success: (res) => {
          const isAndroid = res.platform === 'android'
          const isDevtools = res.platform === 'devtools'
          this.setData({
            ios: !isAndroid,
            innerPaddingRight: `padding-right: ${res.windowWidth - rect.left}px`,
            leftWidth: `width: ${res.windowWidth - rect.left }px`,
            safeAreaTop: isDevtools || isAndroid ? `height: calc(var(--height) + ${res.safeArea.top}px); padding-top: ${res.safeArea.top}px` : ``
          })
        }
      })
    },
  },
  /**
   * 组件的方法列表
   */
  methods: {
    _showChange(show: boolean) {
      const animated = this.data.animated
      let displayStyle = ''
      if (animated) {
        displayStyle = `opacity: ${
          show ? '1' : '0'
        };transition:opacity 0.5s;`
      } else {
        displayStyle = `display: ${show ? '' : 'none'}`
      }
      this.setData({
        displayStyle
      })
    },
    back() {
      const data = this.data
      if (data.delta) {
        wx.navigateBack({
          delta: data.delta
        })
      }
      this.triggerEvent('back', { delta: data.delta }, {})
    }
  },
})
】

miniprogram/components\navigation-bar\navigation-bar.wxml：
【<view class="weui-navigation-bar {{extClass}}">
  <view class="weui-navigation-bar__inner {{ios ? 'ios' : 'android'}}" style="color: {{color}}; background: {{background}}; {{displayStyle}}; {{innerPaddingRight}}; {{safeAreaTop}};">

    <!-- 左侧按钮 -->
    <view class='weui-navigation-bar__left' style="{{leftWidth}};">
      <block wx:if="{{back || homeButton}}">
        <!-- 返回上一页 -->
        <block wx:if="{{back}}">
          <view class="weui-navigation-bar__buttons weui-navigation-bar__buttons_goback">
            <view
              bindtap="back"
              class="weui-navigation-bar__btn_goback_wrapper"
              hover-class="weui-active"
              hover-stay-time="100"
              aria-role="button"
              aria-label="返回"
            >
              <view class="weui-navigation-bar__button weui-navigation-bar__btn_goback"></view>
            </view>
          </view>
        </block>
        <!-- 返回首页 -->
        <block wx:if="{{homeButton}}">
          <view class="weui-navigation-bar__buttons weui-navigation-bar__buttons_home">
            <view
              bindtap="home"
              class="weui-navigation-bar__btn_home_wrapper"
              hover-class="weui-active"
              aria-role="button"
              aria-label="首页"
            >
              <view class="weui-navigation-bar__button weui-navigation-bar__btn_home"></view>
            </view>
          </view>
        </block>
      </block>
      <block wx:else>
        <slot name="left"></slot>
      </block>
    </view>

    <!-- 标题 -->
    <view class='weui-navigation-bar__center'>
      <view wx:if="{{loading}}" class="weui-navigation-bar__loading" aria-role="alert">
        <view
          class="weui-loading"
          aria-role="img"
          aria-label="加载中"
        ></view>
      </view>
      <block wx:if="{{title}}">
        <text>{{title}}</text>
      </block>
      <block wx:else>
        <slot name="center"></slot>
      </block>
    </view>
    
    <!-- 右侧留空 -->
    <view class='weui-navigation-bar__right'>
      <slot name="right"></slot>
    </view>
  </view>
</view>
】

miniprogram/pages\about\about.json：
【{ "usingComponents": { "navigation-bar": "/components/navigation-bar/navigation-bar" } }】

miniprogram/pages\about\about.ts：
【// pages/about/about.ts
Page({

  /**
   * 页面的初始数据
   */
  data: {

  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad() {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})】

miniprogram/pages\about\about.wxml：
【<navigation-bar title="关于我们" back="{{true}}" color="black" background="#FFF"></navigation-bar>
<view style="padding: 20px;">
  <text>我们是领先的电竞服务平台，致力于为广大玩家提供最优质的陪练和教学服务。</text>
</view>】

miniprogram/pages\index\index.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\index\index.ts：
【// index.ts
// 获取应用实例
const app = getApp<IAppOption>()
const defaultAvatarUrl = 'https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0'

Component({
  data: {
    motto: 'Hello World',
    userInfo: {
      avatarUrl: defaultAvatarUrl,
      nickName: '',
    },
    hasUserInfo: false,
    canIUseGetUserProfile: wx.canIUse('getUserProfile'),
    canIUseNicknameComp: wx.canIUse('input.type.nickname'),
  },
  methods: {
    // 事件处理函数
    bindViewTap() {
      wx.navigateTo({
        url: '../logs/logs',
      })
    },
    onChooseAvatar(e: any) {
      const { avatarUrl } = e.detail
      const { nickName } = this.data.userInfo
      this.setData({
        "userInfo.avatarUrl": avatarUrl,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl,
      })
    },
    onInputChange(e: any) {
      const nickName = e.detail.value
      const { avatarUrl } = this.data.userInfo
      this.setData({
        "userInfo.nickName": nickName,
        hasUserInfo: nickName && avatarUrl && avatarUrl !== defaultAvatarUrl,
      })
    },
    getUserProfile() {
      // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
      wx.getUserProfile({
        desc: '展示用户信息', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
        success: (res) => {
          console.log(res)
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          })
        }
      })
    },
  },
})
】

miniprogram/pages\index\index.wxml：
【<!--index.wxml-->
<navigation-bar title="Weixin" back="{{false}}" color="black" background="#FFF"></navigation-bar>
<scroll-view class="scrollarea" scroll-y type="list">
  <view class="container">
    <view class="userinfo">
      <block wx:if="{{canIUseNicknameComp && !hasUserInfo}}">
        <button class="avatar-wrapper" open-type="chooseAvatar" bind:chooseavatar="onChooseAvatar">
          <image class="avatar" src="{{userInfo.avatarUrl}}"></image>
        </button>
        <view class="nickname-wrapper">
          <text class="nickname-label">昵称</text>
          <input type="nickname" class="nickname-input" placeholder="请输入昵称" bind:change="onInputChange" />
        </view>
      </block>
      <block wx:elif="{{!hasUserInfo}}">
        <button wx:if="{{canIUseGetUserProfile}}" bindtap="getUserProfile"> 获取头像昵称 </button>
        <view wx:else> 请使用2.10.4及以上版本基础库 </view>
      </block>
      <block wx:else>
        <image bindtap="bindViewTap" class="userinfo-avatar" src="{{userInfo.avatarUrl}}" mode="cover"></image>
        <text class="userinfo-nickname">{{userInfo.nickName}}</text>
      </block>
    </view>
    <view class="usermotto">
      <text class="user-motto">{{motto}}</text>
    </view>
  </view>
</scroll-view>
】

miniprogram/pages\logs\logs.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\logs\logs.ts：
【// logs.ts
// const util = require('../../utils/util.js')
import { formatTime } from '../../utils/util'

Component({
  data: {
    logs: [],
  },
  lifetimes: {
    attached() {
      this.setData({
        logs: (wx.getStorageSync('logs') || []).map((log: string) => {
          return {
            date: formatTime(new Date(log)),
            timeStamp: log
          }
        }),
      })
    }
  },
})
】

miniprogram/pages\logs\logs.wxml：
【<!--logs.wxml-->
<navigation-bar title="查看启动日志" back="{{true}}" color="black" background="#FFF"></navigation-bar>
<scroll-view class="scrollarea" scroll-y type="list">
  <block wx:for="{{logs}}" wx:key="timeStamp" wx:for-item="log">
    <view class="log-item">{{index + 1}}. {{log.date}}</view>
  </block>
</scroll-view>
】

miniprogram/pages\mine\mine.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\mine\mine.ts：
【// pages/mine/mine.ts
Page({
  data: {
    userInfo: {
      avatarUrl: '/assets/images/icons/defaultUser.svg',
      nickName: '电竞大神',
    }
  },
  onLoad() {},
});】

miniprogram/pages\mine\mine.wxml：
【<!-- pages/mine/mine.wxml -->
<navigation-bar title="个人中心" back="{{false}}" color="black" background="#ffffff"></navigation-bar>
<view class="mine-container">
  <!-- 顶部头像 + 昵称区（渐变背景） -->
  <view class="header-gradient">
    <image class="avatar" src="{{userInfo.avatarUrl || '/assets/images/icons/defaultUser.svg'}}"></image>
    <view class="user-info">
      <text class="nickname">{{userInfo.nickName || '立即登录'}}</text>
      <text wx:if="{{userInfo.nickName}}" class="user-id">ID: 123456</text>
    </view>
  </view>

  <!-- 陪玩订单卡片（保持原有 4 个状态功能） -->
  <view class="order-card">
    <view class="order-header">
      <text class="order-title">陪玩订单</text>
      <navigator url="/pages/order/order" class="order-all">全部 </navigator>
    </view>

    <!-- 保持原功能：四个状态 -->
    <view class="order-status">
      <view class="status-item" bindtap="goToPendingPay">
        <image class="status-icon" src="/assets/images/icons/wallet.png"/>
        <text>待付款</text>
      </view>
      <view class="status-item" bindtap="goToOngoing">
        <image class="status-icon" src="/assets/images/icons/going.png"/>
        <text>进行中</text>
      </view>
      <view class="status-item" bindtap="goToPendingComment">
        <image class="status-icon" src="/assets/images/icons/star.png"/>
        <text>待评价</text>
      </view>
      <view class="status-item" bindtap="goToAllOrders">
        <image class="status-icon" src="/assets/images/icons/document.png"/>
        <text>全部订单</text>
      </view>
    </view>
  </view>

  <!-- 菜单列表（保持原功能） -->
  <view class="menu-list">
    <navigator class="menu-item" url="/pages/about/about">
      <text>关于我们</text>
      <text class="arrow"></text>
    </navigator>
    <view class="menu-item" bindtap="contactService">
      <text>我的客服</text>
      <text class="arrow"></text>
    </view>
    <view class="menu-item" bindtap="openSetting">
      <text>设置</text>
      <text class="arrow"></text>
    </view>
  </view>
</view>】

miniprogram/pages\product-detail\product-detail.json：
【{ "usingComponents": { "navigation-bar": "/components/navigation-bar/navigation-bar" } }】

miniprogram/pages\product-detail\product-detail.ts：
【import { request } from '../../utils/request';

Page({
  data: {
    product: null as Product | null,
    isFavorited: false, // 默认未收藏
    comments: [] as Comment[], 
  },

  onLoad(options: { id?: string }) {
    if (options.id) {
      this.loadProductDetail(options.id);
    }
  },

  loadProductDetail(productId: string) {
    wx.showLoading({ title: '加载中...' });
    request({ url: `/shop/products/${productId}` })
      .then(product => {
        // 假设接口返回 product.isFavorited 字段用于收藏状态
        this.setData({ 
          product, 
          isFavorited: product.isFavorited || false 
        });
        this.loadComments(product.id);
        wx.hideLoading();
      })
      .catch(() => wx.hideLoading());
  },
  loadComments(productId: number) {
    request({ url: `/comments`, data: { productId } })
      .then((comments: Comment[]) => {
        // 为了复用现有 WXML，先做一次映射
        const formatted = comments.map(c => ({
          id: c.id,
          username: c.username,
          avatar: c.avatar,
          content: c.content,
          rating: c.rating ?? 5,
          timestamp: c.timestamp,
        }));
        this.setData({ comments: formatted });
      })
      .catch(() => {
        wx.showToast({ title: '评论加载失败', icon: 'none' });
      });
  },


  onBackToShop() {
    wx.navigateBack();
  },
  //点击店铺返回主页
  OnBack(){
    wx.navigateTo({
      url: `/pages/shop/shop`,
    });
  },
  onBuyNow() {
    wx.navigateTo({
      url: `/pages/order-confirm/order-confirm?id=${this.data.product?.id}`,
    });
  },

  onToggleFavorite() {
    const current = this.data.isFavorited;
    // 模拟收藏/取消收藏动作，可替换为请求接口
    this.setData({ isFavorited: !current });

    wx.showToast({
      title: current ? '已取消收藏' : '已收藏',
      icon: 'success',
    });

    // 也可以在此发送请求更新后端状态：
    // request({ 
    //   url: `/user/favorites/${this.data.product.id}`, 
    //   method: current ? 'DELETE' : 'POST' 
    // });
  },

  onShareAppMessage() {
    return {
      title: this.data.product ? this.data.product.name : '查看商单详情',
      path: `/pages/product-detail/product-detail?id=${this.data.product?.id}`,
    };
  }
});
】

miniprogram/pages\product-detail\product-detail.wxml：
【<navigation-bar title="商品详情" back="{{true}}" color="black" background="#FFF"></navigation-bar>

<view class="page-container" wx:if="{{product}}">
  <image class="product-image" src="{{product.imageUrl}}" mode="widthFix"></image>

  <view class="info-card">
    <view class="price-section">
      <view class="price-wrapper">
        <text class="price-symbol">¥</text>
        <text class="price-main">{{product.price}}</text>
      </view>
      <view class="old-price">¥38888.00</view>
      <view class="favorite-btn" bindtap="onToggleFavorite">
        <image 
          class="favorite-icon" 
          src="{{isFavorited ? '/assets/images/icons/heart-fill.svg' : '/assets/images/icons/heart_line.svg'}}"
        />
      </view>
    </view>
    <view class="product-title-section">
        <view class="product-name">{{product.name}}</view>
        <view class="product-subname">两万八千八百八十八，非心复苏带回家 (赵哥专属)</view>
    </view>
  </view>
  
  <view class="shop-card">
    <image class="shop-logo" src="/assets/images/icons/defaultUser.svg"></image>
    <view class="shop-info">
      <text class="shop-name">速凌电竞</text>
      <text class="shop-fans">1938粉丝</text>
    </view>
    <button class="follow-btn">+ 关注</button>
  </view>

  <view class="detail-card">
    <view class="card-title">详情</view>
    <view class="detail-content">
      <text>{{product.description}}</text>
      <text>\n\n1.下单之后等待打手接单，打手接单后10分钟之内，打手将根据老板您所提供的游戏昵称或ID,添加您的游戏好友如若15分钟之内没有打手添加您的好友，您可以扫码或直接联系客服。</text>
      <text>\n\n2.速凌电竞俱乐部，所有订单不卡保底，以最终撤离为准</text>
    </view>
  </view>

  <view class="comment-card">
  <view class="card-title">用户评论</view>
  <view class="comment-item" wx:for="{{comments}}" wx:key="id">
    <view class="comment-header">
      <image class="avatar" src="{{item.avatar}}" />
      <view class="user-info">
        <text class="username">{{item.username}}</text>
        <text class="timestamp">{{item.timestamp}}</text>
      </view>
    </view>
    <view class="comment-content">{{item.content}}</view>
  </view>
  <view wx:if="{{comments.length === 0}}" class="no-comment">
  <image class="empty-sofa-image" src="/assets/images/icons/empty-sofa.svg" mode="widthFix"></image>
  <text>暂无更多评论</text>
</view>
</view>


</view>

<view class="loading-container" wx:else>
  <text>商品加载中或已下架...</text>
</view>

<view class="bottom-bar">
  <view class="shop-entry" bindtap="OnBack">
    <image class="shop-icon" src="/assets/images/icons/shop.svg"></image>
    <text>店铺</text>
  </view>
  <button class="buy-now-btn" bindtap="onBuyNow">立即购买</button>
</view>


】

miniprogram/pages\shop\shop.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\shop\shop.ts：
【import { request } from '../../utils/request';

Page({
  data: {
    swiperItems: [], // 
    navItems: [],
    products: [] // 
  },

  onLoad() {
    this.loadShopData();
  },
  
  loadShopData() {
    wx.showLoading({ title: '加载中...' });

    // Fetch all data in parallel
    Promise.all([
      request({ url: '/shop/banners' }), // 
      request({ url: '/shop/categories' }), // 
      request({ url: '/shop/products/featured' }) // 
    ]).then(([banners, categories, products]) => {
      // The backend doesn't provide icons for categories, so we add them here
      const navIcons = [
          '/assets/images/icons/rank-up.svg', 
          '/assets/images/icons/pro-player.svg', 
          '/assets/images/icons/tutorial.svg'
      ];
      const navItems = categories.map((category: {name: string}, index: number) => ({
        name: category.name,
        iconUrl: navIcons[index] || '/assets/images/icons/fun-game.svg' // Provide a default icon
      }));

      this.setData({
        swiperItems: banners,
        navItems: navItems,
        products: products
      });
      wx.hideLoading();
    }).catch(err => {
      console.error("Failed to load shop data", err);
      wx.hideLoading();
      wx.showToast({ title: '数据加载失败', icon: 'none' });
    });
  },
});】

miniprogram/pages\shop\shop.wxml：
【<navigation-bar title="店铺" back="{{false}}" color="black" background="#FFF"></navigation-bar>
<view class="shop-container">
  <view class="search-bar">
    <input class="search-input" placeholder="搜索大神或服务" />
  </view>

  <swiper class="promo-swiper" indicator-dots autoplay circular>
    <swiper-item wx:for="{{swiperItems}}" wx:key="index">
      <image src="{{item.imageUrl}}" class="swiper-image" mode="widthFix"/>
    </swiper-item>
  </swiper>

  <view class="icon-nav">
    <view class="nav-item" wx:for="{{navItems}}" wx:key="index">
      <image src="{{item.iconUrl}}" class="nav-icon"/>
      <text class="nav-text">{{item.name}}</text>
    </view>
  </view>

  <view class="recommend-section">
    <view class="section-title">精选推荐</view>
    <view class="product-list">
      <navigator url="/pages/product-detail/product-detail?id={{item.id}}" class="product-card" wx:for="{{products}}" wx:key="id">
        <image class="product-image" src="{{item.imageUrl}}" mode="aspectFill"></image>
        <view class="product-info">
          <view class="product-name">{{item.name}}</view>
          <view class="product-meta">
            <text class="product-views">{{item.views}}人浏览</text>
            <text class="product-sales">已售{{item.sales}}</text> </view>
          <view class="product-price">¥{{item.price}}</view>
        </view>
      </navigator>
    </view>
  </view>
</view>】

miniprogram/pages\zone\zone.json：
【{
  "usingComponents": {
    "navigation-bar": "/components/navigation-bar/navigation-bar"
  }
}】

miniprogram/pages\zone\zone.ts：
【import { request } from '../../utils/request';


Page({
  data: {
    categories: [] as Category[], // 
    products: [] as Product[],
    activeCategoryId: null, // Start with no category selected
    activeCategoryName: '', // 新增字段
  },

  onLoad() {
    this.loadCategories();
  },

  loadCategories() {
    request({ url: '/shop/categories' }).then(categories => { // 
      this.setData({
        categories: categories,
        activeCategoryId: categories.length > 0 ? categories[0].id : null,
        activeCategoryName: categories.length > 0 ? categories[0].name : '',
      });
      if (this.data.activeCategoryId) {
        this.loadProducts(); // 
      }
    });
  },

  onCategoryTap(e: any) {
    const id = e.currentTarget.dataset.id;
    const name = e.currentTarget.dataset.name;
    if (id === this.data.activeCategoryId) return;
    this.setData({ activeCategoryId: id ,activeCategoryName: name});
    this.loadProducts();
  },
  
  loadProducts() {
    if (!this.data.activeCategoryId) return;
    wx.showLoading({ title: '加载中...' });
    request({ url: `/shop/products?categoryId=${this.data.activeCategoryId}` }).then(products => { // 
      this.setData({ products: products });
      wx.hideLoading();
    }).catch(() => wx.hideLoading());
  }
});】

miniprogram/pages\zone\zone.wxml：
【<navigation-bar title="专区" back="{{false}}" color="black" background="#FFF"></navigation-bar>

<view class="zone-container">
  <!-- 左侧分类栏 -->
  <scroll-view class="category-sidebar" scroll-y>
    <view
      wx:for="{{categories}}"
      wx:key="id"
      class="category-item {{activeCategoryId === item.id ? 'active' : ''}}"
      bindtap="onCategoryTap"
      data-id="{{item.id}}">
      <view class="indicator" wx:if="{{activeCategoryId === item.id}}"></view>
      {{item.name}}
    </view>
  </scroll-view>

  <!-- 右侧内容 -->
  <scroll-view class="product-content" scroll-y>
    <!-- 当前分类名称 -->
    <view class="category-title">{{activeCategoryName}}</view>

    <view class="product-list">
      <navigator 
        url="/pages/product-detail/product-detail?id={{item.id}}" 
        class="product-card-zone" 
        wx:for="{{products}}" 
        wx:key="id">
        <image class="product-image-zone" src="{{item.imageUrl}}" mode="aspectFill"></image>
        <view class="product-info-zone">
          <view class="product-name-zone">{{item.name}}</view>
          <view class="product-sales-zone">已售{{item.sales}}</view>
          <view class="product-price-zone">¥{{item.price}}</view>
        </view>
      </navigator>
    </view>
  </scroll-view>
</view>
】

miniprogram/utils\interface.ts：
【
type Product = { id: number; name: string; price: string; sales: number; imageUrl: string; }; // 

type Category = {id: number; name: string;};


type Comment = {
  id: number;
  username: string;   // 后端返回的 user.nickName
  avatar: string;     // user.avatarUrl
  content: string;
  rating: number;
  timestamp: string;  // ISO 日期或已格式化
};
】

miniprogram/utils\request.ts：
【const BASE_URL = 'http://127.0.0.1:8080/api'; // Your backend API base URL 

type RequestOptions = {
  url: string;
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  data?: any;
};

export const request = (options: RequestOptions): Promise<any> => {
  return new Promise((resolve, reject) => {
    wx.request({
      url: BASE_URL + options.url,
      method: options.method || 'GET',
      data: options.data || {},
      success: (res) => {
        if (res.statusCode === 200) {
          resolve(res.data);
        } else {
          reject(res);
        }
      },
      fail: (err) => {
        wx.showToast({
          title: '请求失败',
          icon: 'none'
        });
        reject(err);
      },
    });
  });
};】

miniprogram/utils\util.ts：
【export const formatTime = (date: Date) => {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  return (
    [year, month, day].map(formatNumber).join('/') +
    ' ' +
    [hour, minute, second].map(formatNumber).join(':')
  )
}

const formatNumber = (n: number) => {
  const s = n.toString()
  return s[1] ? s : '0' + s
}
】

